["^ ","~:use-macros",null,"~:excludes",["~#set",["~$namespace","~$ns-publics","~$ns-interns"]],"~:name","~$replumb.ast","~:imports",null,"~:requires",["^ ","~$goog.string","^:"],"~:uses",null,"~:defs",["^ ","~$dissoc-symbol",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/yehonathan.sharvit/prj/klipse/resources/public/fig/js/replumb/ast.cljs","~:line",152,"~:column",7,"~:end-line",152,"~:end-column",20,"~:arglists",["~#list",["~$quote",["^F",[["~$state","~$requirer-ns","~$sym"]]]]],"~:doc","Dissoc symbol from the compiler state given the symbol of the\n  namespace where `require` (or `use`) was called from."],"^6","~$replumb.ast/dissoc-symbol","~:variadic",false,"^@","resources/public/fig/js/replumb/ast.cljs","^D",20,"~:method-params",["^F",[["^H","^I","^J"]]],"~:protocol-impl",null,"~:arglists-meta",["^F",[null,null]],"^B",1,"^A",152,"^C",152,"~:max-fixed-arity",3,"~:fn-var",true,"^E",["^F",["^G",["^F",[["^H","^I","^J"]]]]],"^K","Dissoc symbol from the compiler state given the symbol of the\n  namespace where `require` (or `use`) was called from."],"~$symbol-of-ns?",["^ ","^>",null,"^?",["^ ","^@","/Users/yehonathan.sharvit/prj/klipse/resources/public/fig/js/replumb/ast.cljs","^A",124,"^B",7,"^C",124,"^D",20,"^E",["^F",["^G",["^F",[["~$ns","^J"]]]]],"^K","Yields true when the symbol belongs to ns.\n\n  This typically works on the output of `replumb.ast/symbols`."],"^6","~$replumb.ast/symbol-of-ns?","^M",false,"^@","resources/public/fig/js/replumb/ast.cljs","^D",20,"^N",["^F",[["^T","^J"]]],"^O",null,"^P",["^F",[null,null]],"^B",1,"^A",124,"^C",124,"^Q",2,"^R",true,"^E",["^F",["^G",["^F",[["^T","^J"]]]]],"^K","Yields true when the symbol belongs to ns.\n\n  This typically works on the output of `replumb.ast/symbols`."],"~$macro-of-ns?",["^ ","^>",null,"^?",["^ ","^@","/Users/yehonathan.sharvit/prj/klipse/resources/public/fig/js/replumb/ast.cljs","^A",138,"^B",7,"^C",138,"^D",19,"^E",["^F",["^G",["^F",[["^T","^J"]]]]],"^K","Yields true when the sym belongs to ns.\n\n  This typically works on the output of `replumb.ast/macros`."],"^6","~$replumb.ast/macro-of-ns?","^M",false,"^@","resources/public/fig/js/replumb/ast.cljs","^D",19,"^N",["^F",[["^T","^J"]]],"^O",null,"^P",["^F",[null,null]],"^B",1,"^A",138,"^C",138,"^Q",2,"^R",true,"^E",["^F",["^G",["^F",[["^T","^J"]]]]],"^K","Yields true when the sym belongs to ns.\n\n  This typically works on the output of `replumb.ast/macros`."],"~$require-of-ns?",["^ ","^>",null,"^?",["^ ","^@","/Users/yehonathan.sharvit/prj/klipse/resources/public/fig/js/replumb/ast.cljs","^A",116,"^B",7,"^C",116,"^D",21,"^E",["^F",["^G",["^F",[["^T","^J"]]]]],"^K","Yields true when the symbol belongs to ns.\n\n  This typically works on the output of either `replumb.ast/requires` or\n  `replumb.ast/macro-requires`."],"^6","~$replumb.ast/require-of-ns?","^M",false,"^@","resources/public/fig/js/replumb/ast.cljs","^D",21,"^N",["^F",[["^T","^J"]]],"^O",null,"^P",["^F",[null,null]],"^B",1,"^A",116,"^C",116,"^Q",2,"^R",true,"^E",["^F",["^G",["^F",[["^T","^J"]]]]],"^K","Yields true when the symbol belongs to ns.\n\n  This typically works on the output of either `replumb.ast/requires` or\n  `replumb.ast/macro-requires`."],"^3",["^ ","^>",null,"^?",["^ ","^@","/Users/yehonathan.sharvit/prj/klipse/resources/public/fig/js/replumb/ast.cljs","^A",51,"^B",7,"^C",51,"^D",16,"^E",["^F",["^G",["^F",[["^H","^T"]]]]],"^K","Given compiler state and namespace symbol, returns its whole AST\n  content.\n\n  Beware, there can be a lot of data."],"^6","~$replumb.ast/namespace","^M",false,"^@","resources/public/fig/js/replumb/ast.cljs","^D",16,"^N",["^F",[["^H","^T"]]],"^O",null,"^P",["^F",[null,null]],"^B",1,"^A",51,"^C",51,"^Q",2,"^R",true,"^E",["^F",["^G",["^F",[["^H","^T"]]]]],"^K","Given compiler state and namespace symbol, returns its whole AST\n  content.\n\n  Beware, there can be a lot of data."],"^4",["^ ","^>",null,"^?",["^ ","^@","/Users/yehonathan.sharvit/prj/klipse/resources/public/fig/js/replumb/ast.cljs","^A",12,"^B",7,"^C",12,"^D",17,"^E",["^F",["^G",["^F",[["^H","^T"]]]]],"^K","Given compiler state and namespace symbol return all the public vars\n  in the AST.\n\n  Analogous to `cljs.analyzer/ns-publics`, but it returns analysis maps\n  not vars.\n\n  Beware, there can be a lot of data."],"^6","~$replumb.ast/ns-publics","^M",false,"^@","resources/public/fig/js/replumb/ast.cljs","^D",17,"^N",["^F",[["^H","^T"]]],"^O",null,"^P",["^F",[null,null]],"^B",1,"^A",12,"^C",12,"^Q",2,"^R",true,"^E",["^F",["^G",["^F",[["^H","^T"]]]]],"^K","Given compiler state and namespace symbol return all the public vars\n  in the AST.\n\n  Analogous to `cljs.analyzer/ns-publics`, but it returns analysis maps\n  not vars.\n\n  Beware, there can be a lot of data."],"~$symbols",["^ ","^>",null,"^?",["^ ","^@","/Users/yehonathan.sharvit/prj/klipse/resources/public/fig/js/replumb/ast.cljs","^A",86,"^B",7,"^C",86,"^D",14,"^E",["^F",["^G",["^F",[["^H","^I"]]]]],"^K","Return referred/used symbols given compiler state and a namespace: a\n  map of `{symbol1 ns, symbol2 ns, ...}`.\n\n  You need a `:refer` in the requirer-ns namespace for this to return\n  something."],"^6","~$replumb.ast/symbols","^M",false,"^@","resources/public/fig/js/replumb/ast.cljs","^D",14,"^N",["^F",[["^H","^I"]]],"^O",null,"^P",["^F",[null,null]],"^B",1,"^A",86,"^C",86,"^Q",2,"^R",true,"^E",["^F",["^G",["^F",[["^H","^I"]]]]],"^K","Return referred/used symbols given compiler state and a namespace: a\n  map of `{symbol1 ns, symbol2 ns, ...}`.\n\n  You need a `:refer` in the requirer-ns namespace for this to return\n  something."],"~$macros",["^ ","^>",null,"^?",["^ ","^@","/Users/yehonathan.sharvit/prj/klipse/resources/public/fig/js/replumb/ast.cljs","^A",96,"^B",7,"^C",96,"^D",13,"^E",["^F",["^G",["^F",[["^H","^I"]]]]],"^K","Return all the macro symbols given compiler state and namespace: a\n  map of `{macro-symbol1 macro-ns, macro-symbol2 macro-ns}`.\n\n  You need a `:refer` in the requirer-ns namespace for this to return\n  something."],"^6","~$replumb.ast/macros","^M",false,"^@","resources/public/fig/js/replumb/ast.cljs","^D",13,"^N",["^F",[["^H","^I"]]],"^O",null,"^P",["^F",[null,null]],"^B",1,"^A",96,"^C",96,"^Q",2,"^R",true,"^E",["^F",["^G",["^F",[["^H","^I"]]]]],"^K","Return all the macro symbols given compiler state and namespace: a\n  map of `{macro-symbol1 macro-ns, macro-symbol2 macro-ns}`.\n\n  You need a `:refer` in the requirer-ns namespace for this to return\n  something."],"~$dissoc-macro",["^ ","^>",null,"^?",["^ ","^@","/Users/yehonathan.sharvit/prj/klipse/resources/public/fig/js/replumb/ast.cljs","^A",167,"^B",7,"^C",167,"^D",19,"^E",["^F",["^G",["^F",[["^H","^I","^J"]]]]],"^K","Dissoc a macro symbol from the compiler state given the symbol of the\n  namespace where `require-macros` (or `use-macros`) was called from."],"^6","~$replumb.ast/dissoc-macro","^M",false,"^@","resources/public/fig/js/replumb/ast.cljs","^D",19,"^N",["^F",[["^H","^I","^J"]]],"^O",null,"^P",["^F",[null,null]],"^B",1,"^A",167,"^C",167,"^Q",3,"^R",true,"^E",["^F",["^G",["^F",[["^H","^I","^J"]]]]],"^K","Dissoc a macro symbol from the compiler state given the symbol of the\n  namespace where `require-macros` (or `use-macros`) was called from."],"~$get-state",["^ ","^>",null,"^?",["^ ","^@","/Users/yehonathan.sharvit/prj/klipse/resources/public/fig/js/replumb/ast.cljs","^A",245,"^B",7,"^C",245,"^D",16,"^E",["^F",["^G",["^F",[["^H","^I"]]]]],"^K","Retrieves a map with the state details for the input requirer-ns.\n\n  In replumb jargon:\n\n  ```\n  (in-ns 'cljs.user)          ;; requirer-ns\n  (require-macros 'cljs.test) ;; required-ns\n  ```\n\n  And the returned map is (on the right, the compiler AST real key):\n\n  ```\n  {:requires (replumb.ast/requires ...)             ;; :requires\n   :macro-requires (replumb.ast/macro-requires ...) ;; :require-macros\n   :symbols (replumb.ast/symbols ...)               ;; :uses\n   :macros (replumb.ast/macros ...)                 ;; :use-macros\n   :imports (replumb.ast/imports ...)}              ;; :imports\n  ```"],"^6","~$replumb.ast/get-state","^M",false,"^@","resources/public/fig/js/replumb/ast.cljs","^D",16,"^N",["^F",[["^H","^I"]]],"^O",null,"^P",["^F",[null,null]],"^B",1,"^A",245,"^C",245,"^Q",2,"^R",true,"^E",["^F",["^G",["^F",[["^H","^I"]]]]],"^K","Retrieves a map with the state details for the input requirer-ns.\n\n  In replumb jargon:\n\n  ```\n  (in-ns 'cljs.user)          ;; requirer-ns\n  (require-macros 'cljs.test) ;; required-ns\n  ```\n\n  And the returned map is (on the right, the compiler AST real key):\n\n  ```\n  {:requires (replumb.ast/requires ...)             ;; :requires\n   :macro-requires (replumb.ast/macro-requires ...) ;; :require-macros\n   :symbols (replumb.ast/symbols ...)               ;; :uses\n   :macros (replumb.ast/macros ...)                 ;; :use-macros\n   :imports (replumb.ast/imports ...)}              ;; :imports\n  ```"],"~$dissoc-all",["^ ","^>",null,"^?",["^ ","^@","/Users/yehonathan.sharvit/prj/klipse/resources/public/fig/js/replumb/ast.cljs","^A",218,"^B",7,"^C",218,"^D",17,"^E",["^F",["^G",["^F",[["^H","^I","~$required-ns"],["^H","^I","^19","~$type"]]]]],"^K","Dissoc all the required-ns symbols from requirer-ns.\n\n  There are five types of symbol in replumb jargon, which loosely map to\n  `cljs.js` ones. These optionally go in the type parameter as keyword:\n\n  - `:symbol`, the default, for instance my-sym in `(def my-sym 3)`\n  - `:macro`, which comes from a `(defmacro ...)`\n  - `:import`, for instance User in `(import 'foo.bar.User)`\n  - `:require`, which is the namespace symbol in a `(require ...)`\n  - `:macro-require`, which is the namespace symbol in a `(require-macros ...)`\n\n  This is the only function in the lot that also reliably clears\n  namespace aliases.","~:top-fn",["^ ","^M",false,"^Q",4,"^N",["^F",[["^H","^I","^19"],["^H","^I","^19","^1:"]]],"^E",["^F",[["^H","^I","^19"],["^H","^I","^19","^1:"]]],"^P",["^F",[null,null]]]],"^6","~$replumb.ast/dissoc-all","^M",false,"^@","resources/public/fig/js/replumb/ast.cljs","^D",17,"^1;",["^ ","^M",false,"^Q",4,"^N",["^F",[["^H","^I","^19"],["^H","^I","^19","^1:"]]],"^E",["^F",[["^H","^I","^19"],["^H","^I","^19","^1:"]]],"^P",["^F",[null,null]]],"^N",["^F",[["^H","^I","^19"],["^H","^I","^19","^1:"]]],"^O",null,"^P",["^F",[null,null]],"^B",1,"^A",218,"^C",218,"^Q",4,"^R",true,"^E",["^F",[["^H","^I","^19"],["^H","^I","^19","^1:"]]],"^K","Dissoc all the required-ns symbols from requirer-ns.\n\n  There are five types of symbol in replumb jargon, which loosely map to\n  `cljs.js` ones. These optionally go in the type parameter as keyword:\n\n  - `:symbol`, the default, for instance my-sym in `(def my-sym 3)`\n  - `:macro`, which comes from a `(defmacro ...)`\n  - `:import`, for instance User in `(import 'foo.bar.User)`\n  - `:require`, which is the namespace symbol in a `(require ...)`\n  - `:macro-require`, which is the namespace symbol in a `(require-macros ...)`\n\n  This is the only function in the lot that also reliably clears\n  namespace aliases."],"~$dissoc-import",["^ ","^>",null,"^?",["^ ","^@","/Users/yehonathan.sharvit/prj/klipse/resources/public/fig/js/replumb/ast.cljs","^A",159,"^B",7,"^C",159,"^D",20,"^E",["^F",["^G",["^F",[["^H","^I","^J"]]]]],"^K","Dissoc the imported symbol from the compiler state."],"^6","~$replumb.ast/dissoc-import","^M",false,"^@","resources/public/fig/js/replumb/ast.cljs","^D",20,"^N",["^F",[["^H","^I","^J"]]],"^O",null,"^P",["^F",[null,null]],"^B",1,"^A",159,"^C",159,"^Q",3,"^R",true,"^E",["^F",["^G",["^F",[["^H","^I","^J"]]]]],"^K","Dissoc the imported symbol from the compiler state."],"~$imports",["^ ","^>",null,"^?",["^ ","^@","/Users/yehonathan.sharvit/prj/klipse/resources/public/fig/js/replumb/ast.cljs","^A",73,"^B",7,"^C",73,"^D",14,"^E",["^F",["^G",["^F",[["^H","^I"]]]]],"^K","Return imported symbols given compiler state and a namespace: a map\n  of `{symbol1 ns, symbol2 ns, ...}`.\n\n  Note that an `import` symbol is the final segment only, so `User` in\n  the `foo.bar.User`\n\n  You need a `import` in the requirer-ns namespace for this to return\n  something."],"^6","~$replumb.ast/imports","^M",false,"^@","resources/public/fig/js/replumb/ast.cljs","^D",14,"^N",["^F",[["^H","^I"]]],"^O",null,"^P",["^F",[null,null]],"^B",1,"^A",73,"^C",73,"^Q",2,"^R",true,"^E",["^F",["^G",["^F",[["^H","^I"]]]]],"^K","Return imported symbols given compiler state and a namespace: a map\n  of `{symbol1 ns, symbol2 ns, ...}`.\n\n  Note that an `import` symbol is the final segment only, so `User` in\n  the `foo.bar.User`\n\n  You need a `import` in the requirer-ns namespace for this to return\n  something."],"~$ns-defs",["^ ","^>",null,"^?",["^ ","^@","/Users/yehonathan.sharvit/prj/klipse/resources/public/fig/js/replumb/ast.cljs","^A",42,"^B",7,"^C",42,"^D",14,"^E",["^F",["^G",["^F",[["^H","^T"]]]]],"^K","Given compiler state and namespace symbol, returns its AST's `:defs`\n  key content.\n\n  Beware, there can be a lot of data."],"^6","~$replumb.ast/ns-defs","^M",false,"^@","resources/public/fig/js/replumb/ast.cljs","^D",14,"^N",["^F",[["^H","^T"]]],"^O",null,"^P",["^F",[null,null]],"^B",1,"^A",42,"^C",42,"^Q",2,"^R",true,"^E",["^F",["^G",["^F",[["^H","^T"]]]]],"^K","Given compiler state and namespace symbol, returns its AST's `:defs`\n  key content.\n\n  Beware, there can be a lot of data."],"~$known-namespaces",["^ ","^>",null,"^?",["^ ","^@","/Users/yehonathan.sharvit/prj/klipse/resources/public/fig/js/replumb/ast.cljs","^A",6,"^B",7,"^C",6,"^D",23,"^E",["^F",["^G",["^F",[["^H"]]]]],"^K","Given a compiler state, return the seq of namespace symbols currently\n  present in the AST."],"^6","~$replumb.ast/known-namespaces","^M",false,"^@","resources/public/fig/js/replumb/ast.cljs","^D",23,"^N",["^F",[["^H"]]],"^O",null,"^P",["^F",[null,null]],"^B",1,"^A",6,"^C",6,"^Q",1,"^R",true,"^E",["^F",["^G",["^F",[["^H"]]]]],"^K","Given a compiler state, return the seq of namespace symbols currently\n  present in the AST."],"~$empty-state?",["^ ","^>",null,"^?",["^ ","^@","/Users/yehonathan.sharvit/prj/klipse/resources/public/fig/js/replumb/ast.cljs","^A",271,"^B",7,"^C",271,"^D",19,"^E",["^F",["^G",["^F",[["^H","^I"]]]]],"^K","Return true if the compiler state is empty.\n\n  In other words if `(every? empty? (vals (replumb.ast/get-state ...)`\n  returns true for the input requirer-ns.\n\n  In replumb jargon:\n\n  ```\n  (in-ns 'cljs.user)          ;; requirer-ns\n  (require-macros 'cljs.test) ;; required-ns\n  ```"],"^6","~$replumb.ast/empty-state?","^M",false,"^@","resources/public/fig/js/replumb/ast.cljs","^D",19,"^N",["^F",[["^H","^I"]]],"^O",null,"^P",["^F",[null,null]],"^B",1,"^A",271,"^C",271,"^Q",2,"^R",true,"^E",["^F",["^G",["^F",[["^H","^I"]]]]],"^K","Return true if the compiler state is empty.\n\n  In other words if `(every? empty? (vals (replumb.ast/get-state ...)`\n  returns true for the input requirer-ns.\n\n  In replumb jargon:\n\n  ```\n  (in-ns 'cljs.user)          ;; requirer-ns\n  (require-macros 'cljs.test) ;; required-ns\n  ```"],"~$requires",["^ ","^>",null,"^?",["^ ","^@","/Users/yehonathan.sharvit/prj/klipse/resources/public/fig/js/replumb/ast.cljs","^A",60,"^B",7,"^C",60,"^D",15,"^E",["^F",["^G",["^F",[["^H","^I"]]]]],"^K","Return required symbols given compiler state and namespace: a map of\n  `{ns ns, another-ns another-ns, ...}`.\n\n  Note that `import` also adds something to the AST's `:requires` key of\n  the requirer-ns, see `replumb.ast/dissoc-import`.\n\n  You need a `require` in the requirer-ns namespace for this to return\n  something."],"^6","~$replumb.ast/requires","^M",false,"^@","resources/public/fig/js/replumb/ast.cljs","^D",15,"^N",["^F",[["^H","^I"]]],"^O",null,"^P",["^F",[null,null]],"^B",1,"^A",60,"^C",60,"^Q",2,"^R",true,"^E",["^F",["^G",["^F",[["^H","^I"]]]]],"^K","Return required symbols given compiler state and namespace: a map of\n  `{ns ns, another-ns another-ns, ...}`.\n\n  Note that `import` also adds something to the AST's `:requires` key of\n  the requirer-ns, see `replumb.ast/dissoc-import`.\n\n  You need a `require` in the requirer-ns namespace for this to return\n  something."],"^5",["^ ","^>",null,"^?",["^ ","^@","/Users/yehonathan.sharvit/prj/klipse/resources/public/fig/js/replumb/ast.cljs","^A",28,"^B",7,"^C",28,"^D",17,"^E",["^F",["^G",["^F",[["^H","^T"]]]]],"^K","Given compiler state and namespace symbol return all the vars in the\n  AST.\n\n  Analogous to `cljs.analyzer/ns-interns`, but it returns analysis maps\n  not vars.\n\n  Beware, there can be a lot of data."],"^6","~$replumb.ast/ns-interns","^M",false,"^@","resources/public/fig/js/replumb/ast.cljs","^D",17,"^N",["^F",[["^H","^T"]]],"^O",null,"^P",["^F",[null,null]],"^B",1,"^A",28,"^C",28,"^Q",2,"^R",true,"^E",["^F",["^G",["^F",[["^H","^T"]]]]],"^K","Given compiler state and namespace symbol return all the vars in the\n  AST.\n\n  Analogous to `cljs.analyzer/ns-interns`, but it returns analysis maps\n  not vars.\n\n  Beware, there can be a lot of data."],"~$macro-requires",["^ ","^>",null,"^?",["^ ","^@","/Users/yehonathan.sharvit/prj/klipse/resources/public/fig/js/replumb/ast.cljs","^A",106,"^B",7,"^C",106,"^D",21,"^E",["^F",["^G",["^F",[["^H","^I"]]]]],"^K","Return all the required macro namespaces given compiler state and a\n  namespace: a map of `{macro-ns1 macro-ns1, macro-ns2 macro-ns2, ...}`.\n\n  You need a `require-macros` in the requirer-ns namespace for this to\n  return something."],"^6","~$replumb.ast/macro-requires","^M",false,"^@","resources/public/fig/js/replumb/ast.cljs","^D",21,"^N",["^F",[["^H","^I"]]],"^O",null,"^P",["^F",[null,null]],"^B",1,"^A",106,"^C",106,"^Q",2,"^R",true,"^E",["^F",["^G",["^F",[["^H","^I"]]]]],"^K","Return all the required macro namespaces given compiler state and a\n  namespace: a map of `{macro-ns1 macro-ns1, macro-ns2 macro-ns2, ...}`.\n\n  You need a `require-macros` in the requirer-ns namespace for this to\n  return something."],"~$dissoc-ns",["^ ","^>",null,"^?",["^ ","^@","/Users/yehonathan.sharvit/prj/klipse/resources/public/fig/js/replumb/ast.cljs","^A",146,"^B",7,"^C",146,"^D",16,"^E",["^F",["^G",["^F",[["^H","^T"]]]]],"^K","Dissoc the namespace symbol from the compiler state."],"^6","~$replumb.ast/dissoc-ns","^M",false,"^@","resources/public/fig/js/replumb/ast.cljs","^D",16,"^N",["^F",[["^H","^T"]]],"^O",null,"^P",["^F",[null,null]],"^B",1,"^A",146,"^C",146,"^Q",2,"^R",true,"^E",["^F",["^G",["^F",[["^H","^T"]]]]],"^K","Dissoc the namespace symbol from the compiler state."],"~$dissoc-macro-require",["^ ","^>",null,"^?",["^ ","^@","/Users/yehonathan.sharvit/prj/klipse/resources/public/fig/js/replumb/ast.cljs","^A",196,"^B",7,"^C",196,"^D",27,"^E",["^F",["^G",["^F",[["^H","^I","^19"]]]]],"^K","Dissoc the macro required-ns from requirer-ns.\n\n  For instance after:\n\n  ```\n  (in-ns 'cljs.user)          ;; requirer-ns\n  (require-macros 'cljs.test) ;; required-ns\n  ```\n\n  You can use the following to clean the compiler state:\n\n  ```\n  (dissoc-macro-require repl/st 'cljs.user 'cljs.test)\n  ```\n\n  This util function does not remove aliases. See\n  `replumb.ast/dissoc-all`."],"^6","~$replumb.ast/dissoc-macro-require","^M",false,"^@","resources/public/fig/js/replumb/ast.cljs","^D",27,"^N",["^F",[["^H","^I","^19"]]],"^O",null,"^P",["^F",[null,null]],"^B",1,"^A",196,"^C",196,"^Q",3,"^R",true,"^E",["^F",["^G",["^F",[["^H","^I","^19"]]]]],"^K","Dissoc the macro required-ns from requirer-ns.\n\n  For instance after:\n\n  ```\n  (in-ns 'cljs.user)          ;; requirer-ns\n  (require-macros 'cljs.test) ;; required-ns\n  ```\n\n  You can use the following to clean the compiler state:\n\n  ```\n  (dissoc-macro-require repl/st 'cljs.user 'cljs.test)\n  ```\n\n  This util function does not remove aliases. See\n  `replumb.ast/dissoc-all`."],"~$dissoc-require",["^ ","^>",null,"^?",["^ ","^@","/Users/yehonathan.sharvit/prj/klipse/resources/public/fig/js/replumb/ast.cljs","^A",174,"^B",7,"^C",174,"^D",21,"^E",["^F",["^G",["^F",[["^H","^I","^19"]]]]],"^K","Dissoc the required-ns from requirer-ns.\n\n  For instance after:\n\n  ```\n  (in-ns 'cljs.user)        ;; requirer-ns\n  (require 'clojure.string) ;; required-ns\n  ```\n\n  You can use the following to clean the compiler state:\n\n  ```\n  (dissoc-require repl/st 'cljs.user 'clojure.string)\n  ```\n\n  This util function does not remove aliases. See\n  `replumb.ast/dissoc-all`."],"^6","~$replumb.ast/dissoc-require","^M",false,"^@","resources/public/fig/js/replumb/ast.cljs","^D",21,"^N",["^F",[["^H","^I","^19"]]],"^O",null,"^P",["^F",[null,null]],"^B",1,"^A",174,"^C",174,"^Q",3,"^R",true,"^E",["^F",["^G",["^F",[["^H","^I","^19"]]]]],"^K","Dissoc the required-ns from requirer-ns.\n\n  For instance after:\n\n  ```\n  (in-ns 'cljs.user)        ;; requirer-ns\n  (require 'clojure.string) ;; required-ns\n  ```\n\n  You can use the following to clean the compiler state:\n\n  ```\n  (dissoc-require repl/st 'cljs.user 'clojure.string)\n  ```\n\n  This util function does not remove aliases. See\n  `replumb.ast/dissoc-all`."],"~$import-of-ns?",["^ ","^>",null,"^?",["^ ","^@","/Users/yehonathan.sharvit/prj/klipse/resources/public/fig/js/replumb/ast.cljs","^A",131,"^B",7,"^C",131,"^D",20,"^E",["^F",["^G",["^F",[["^T","^J"]]]]],"^K","Yields true when sym belongs to ns.\n\n  This typically works on the output of `replumb.ast/imports`."],"^6","~$replumb.ast/import-of-ns?","^M",false,"^@","resources/public/fig/js/replumb/ast.cljs","^D",20,"^N",["^F",[["^T","^J"]]],"^O",null,"^P",["^F",[null,null]],"^B",1,"^A",131,"^C",131,"^Q",2,"^R",true,"^E",["^F",["^G",["^F",[["^T","^J"]]]]],"^K","Yields true when sym belongs to ns.\n\n  This typically works on the output of `replumb.ast/imports`."]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^2",["~:cljs.analyzer/namespaces","~:private","^0","~:macros","~:symbol","^8","^9","~:macro-requires","^;","^<","^1T","~:symbols"]],"~:order",["^1W","^1X","^1Y","^<","^9","^8","^;","^0","^1T","^1Z","^1[","^20"]],"^K","Thin layer of helpers over the ClojureScript Abstract syntax tree (AST)"]