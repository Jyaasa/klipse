["^ ","~:use-macros",["^ ","~$with-compiler-env","~$cljs.env.macros"],"~:excludes",["~#set",["~$find-ns","~$ns-publics","~$ns-interns","~$load-file"]],"~:name","~$replumb.repl","~:imports",null,"~:requires",["^ ","~$cljs.tools.reader.impl.commons","^=","~$cljs","~$cljs.js","~$load","~$replumb.load","~$cljs.tools.reader","^B","^A","^A","~$tags","~$cljs.tagged-literals","~$r","^B","^?","^?","~$rc","^=","~$cljs.tools.reader.reader-types","^F","~$cljs.env","^G","~$ana","~$cljs.analyzer","~$replumb.cache","^J","~$browser","~$replumb.browser","~$docs","~$replumb.doc-maps","~$cljs.pprint","^O","^D","^D","~$ast","~$replumb.ast","~$nodejs","~$replumb.nodejs","~$env","^G","~$s","~$clojure.string","^N","^N","^L","^L","^I","^I","~$common","~$replumb.common","~$cache","^J","~$cljs.repl","^Y","^Q","^Q","~$rt","^F","^U","^U","^S","^S","~$repl","^Y","^W","^W"],"~:uses",["^ ","~$pprint","^O"],"~:defs",["^ ","~$file-path-from-foreign-libs",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","~:line",288,"~:column",7,"~:end-line",288,"~:end-column",34,"~:arglists",["~#list",["~$quote",["^1<",[["~$name","~$foreign-libs"]]]]],"~:doc","Retrieves the path for a file from the user provided :foreign-libs option.\n  If not found, returns nil."],"^9","~$replumb.repl/file-path-from-foreign-libs","~:variadic",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",34,"~:method-params",["^1<",[["^1>","^1?"]]],"~:protocol-impl",null,"~:arglists-meta",["^1<",[null,null]],"^18",1,"^17",288,"^19",288,"~:max-fixed-arity",2,"~:fn-var",true,"^1;",["^1<",["^1=",["^1<",[["^1>","^1?"]]]]],"^1@","Retrieves the path for a file from the user provided :foreign-libs option.\n  If not found, returns nil."],"~$purge-cljs-user!",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",242,"^18",7,"^19",242,"^1:",23,"^1;",["^1<",["^1=",["^1<",[[],["~$namespaces"]]]]],"^1@","Remove all the namespace references required from inside cljs.user\n  from the compiler state.\n\n  The 0-arity version cleans namespaces in cljs.js/*loaded*.","~:top-fn",["^ ","^1B",false,"^1F",1,"^1C",["^1<",[[],["^1I"]]],"^1;",["^1<",[[],["^1I"]]],"^1E",["^1<",[null,null]]]],"^9","~$replumb.repl/purge-cljs-user!","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",23,"^1J",["^ ","^1B",false,"^1F",1,"^1C",["^1<",[[],["^1I"]]],"^1;",["^1<",[[],["^1I"]]],"^1E",["^1<",[null,null]]],"^1C",["^1<",[[],["^1I"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",242,"^19",242,"^1F",1,"^1G",true,"^1;",["^1<",[[],["^1I"]]],"^1@","Remove all the namespace references required from inside cljs.user\n  from the compiler state.\n\n  The 0-arity version cleans namespaces in cljs.js/*loaded*."],"~$success-map",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",415,"^18",7,"^19",415,"^1:",18,"^1;",["^1<",["^1=",["^1<",[["~$opts","~$form","~$warning","~$value"]]]]],"^1@","Builds the map to return when the evaluation returned success.\n  Supports the following options:\n\n  * :no-pr-str-on-value avoids wrapping value in pr-str."],"^9","~$replumb.repl/success-map","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",18,"^1C",["^1<",[["^1M","^1N","^1O","^1P"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",415,"^19",415,"^1F",4,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M","^1N","^1O","^1P"]]]]],"^1@","Builds the map to return when the evaluation returned success.\n  Supports the following options:\n\n  * :no-pr-str-on-value avoids wrapping value in pr-str."],"~$valid-opts",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",359,"^18",7,"^19",359,"^1:",17,"^1;",["^1<",["^1=",["^1<",[["~$user-opts"]]]]],"^1@","Validate the input user options. Returns a new map without invalid\n  ones according to valid-opts-set."],"^9","~$replumb.repl/valid-opts","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",17,"^1C",["^1<",[["^1S"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",359,"^19",359,"^1F",1,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1S"]]]]],"^1@","Validate the input user options. Returns a new map without invalid\n  ones according to valid-opts-set."],"~$initialized-state",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",838,"^18",7,"^19",838,"^1:",24,"^1;",["^1<",["^1=",["^1<",[["~$old-app-env","^1M"]]]]],"^1@","Move the state to \"Initialized\", signaling that the init is not in\n  progress and done."],"^9","~$replumb.repl/initialized-state","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",24,"^1C",["^1<",[["^1V","^1M"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",838,"^19",838,"^1F",2,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1V","^1M"]]]]],"^1@","Move the state to \"Initialized\", signaling that the init is not in\n  progress and done."],"~$empty-cljs-user?",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",191,"^18",7,"^19",191,"^1:",23,"^1;",["^1<",["^1=",["^1<",[[]]]]],"^1@","Is the compiler state for the cljs.user namespace empty?"],"^9","~$replumb.repl/empty-cljs-user?","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",23,"^1C",["^1<",[[]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",191,"^19",191,"^1F",0,"^1G",true,"^1;",["^1<",["^1=",["^1<",[[]]]]],"^1@","Is the compiler state for the cljs.user namespace empty?"],"~$fetch-source",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",687,"^18",7,"^19",687,"^1:",19,"^1;",["^1<",["^1=",["^1<",[[["^ ","~:keys",["~$verbose","~$read-file-fn!"]],"~$var","~$paths-to-try","~$cb"]]]]]],"^9","~$replumb.repl/fetch-source","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",19,"^1C",["^1<",[["~$p__67438","^22","^23","^24"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",687,"^19",687,"^1F",4,"^1G",true,"^1;",["^1<",["^1=",["^1<",[[["^ ","^1[",["^20","^21"]],"^22","^23","^24"]]]]]],"~$process-apropos",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",739,"^18",7,"^19",739,"^1:",22,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","~$data","~$str-or-pattern"]]]]]],"^9","~$replumb.repl/process-apropos","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",22,"^1C",["^1<",[["^1M","^24","^28","^29"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",739,"^19",739,"^1F",4,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","^28","^29"]]]]]],"~$doc-map-special-symbols",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",628,"^18",7,"^19",628,"^1:",30,"^1;",["^1<",["^1=",["^1<",[["~$sym"]]]]]],"^9","~$replumb.repl/doc-map-special-symbols","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",30,"^1C",["^1<",[["^2<"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",628,"^19",628,"^1F",1,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^2<"]]]]]],"~$make-load-fn",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",295,"^18",7,"^19",295,"^1:",19,"^1;",["^1<",["^1=",["^1<",[[["^ ","^1[",["^20","~$src-paths","^21","^X","^1?","~:as","^1S"]]]]]]],"^1@","Makes a load function that will read from a sequence of src-paths\n  using a supplied read-file-fn!. It returns a cljs.js-compatible\n  *load-fn*. Both src-paths and read-file-fn! are values in the options map\n  passed as parameter.\n\n  Read-file-fn! is an async 2-arity function with signature [file-path\n  src-cb] where src-cb is itself a function (fn [source] ...) that needs\n  to be called with the full source of the library (as string).\n\n  If additionally the user map contains the :cache map the loading process\n  will consider cached files as follow: if :path is present, it will try to load\n  the cached files from the given path. If :src-paths-lookup? is present, it\n  will try to load the cached files from src-paths."],"^9","~$replumb.repl/make-load-fn","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",19,"^1C",["^1<",[["~$p__67353"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",295,"^19",295,"^1F",1,"^1G",true,"^1;",["^1<",["^1=",["^1<",[[["^ ","^1[",["^20","^2?","^21","^X","^1?","^2@","^1S"]]]]]]],"^1@","Makes a load function that will read from a sequence of src-paths\n  using a supplied read-file-fn!. It returns a cljs.js-compatible\n  *load-fn*. Both src-paths and read-file-fn! are values in the options map\n  passed as parameter.\n\n  Read-file-fn! is an async 2-arity function with signature [file-path\n  src-cb] where src-cb is itself a function (fn [source] ...) that needs\n  to be called with the full source of the library (as string).\n\n  If additionally the user map contains the :cache map the loading process\n  will consider cached files as follow: if :path is present, it will try to load\n  the cached files from the given path. If :src-paths-lookup? is present, it\n  will try to load the cached files from src-paths."],"~$add-init-eval-fn",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",393,"^18",7,"^19",393,"^1:",23,"^1;",["^1<",["^1=",["^1<",[["^1M","^1S"]]]]],"^1@","Given current and user options, returns a map containing a\n  valid :init-fns,conjoining with the one in current if necessary."],"^9","~$replumb.repl/add-init-eval-fn","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",23,"^1C",["^1<",[["^1M","^1S"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",393,"^19",393,"^1F",2,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M","^1S"]]]]],"^1@","Given current and user options, returns a map containing a\n  valid :init-fns,conjoining with the one in current if necessary."],"~$validated-call-back!",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",453,"^18",7,"^19",453,"^1:",27,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","~$res"]]]]]],"^9","~$replumb.repl/validated-call-back!","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",27,"^1C",["^1<",[["^1M","^24","^2F"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",453,"^19",453,"^1F",3,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","^2F"]]]]]],"~$process-dir",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",731,"^18",7,"^19",731,"^1:",18,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","^28","^2<"]]]]]],"^9","~$replumb.repl/process-dir","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",18,"^1C",["^1<",[["^1M","^24","^28","^2<"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",731,"^19",731,"^1F",4,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","^28","^2<"]]]]]],"~$custom-warning-handler",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",440,"^18",7,"^19",440,"^1:",29,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","~$warning-type","^T","~$extra"]]]]],"^1@","Handles the case when the evaluation returns a warning and can be\n  passed as a warning handler when partially applied. At the moment it\n  treats warnings as errors."],"^9","~$replumb.repl/custom-warning-handler","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",29,"^1C",["^1<",[["^1M","^24","^2K","^T","^2L"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",440,"^19",440,"^1F",5,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","^2K","^T","^2L"]]]]],"^1@","Handles the case when the evaluation returns a warning and can be\n  passed as a warning handler when partially applied. At the moment it\n  treats warnings as errors."],"~$needs-init-state",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",846,"^18",7,"^19",846,"^1:",23,"^1;",["^1<",["^1=",["^1<",[["^1V"]]]]],"^1@","Reset the initialization state, moving to \"Needs Init\", signaling\n  that the we need to initialize the app."],"^9","~$replumb.repl/needs-init-state","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",23,"^1C",["^1<",[["^1V"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",846,"^19",846,"^1F",1,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1V"]]]]],"^1@","Reset the initialization state, moving to \"Needs Init\", signaling\n  that the we need to initialize the app."],"~$make-ns-form",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",262,"^18",7,"^19",262,"^1:",19,"^1;",["^1<",["^1=",["^1<",[["~$kind","~$specs","~$target-ns"]]]]]],"^9","~$replumb.repl/make-ns-form","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",19,"^1C",["^1<",[["^2Q","^2R","^2S"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",262,"^19",262,"^1F",3,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^2Q","^2R","^2S"]]]]]],"~$process-in-ns",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",663,"^18",7,"^19",663,"^1:",20,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","^28","~$ns-string"]]]]]],"^9","~$replumb.repl/process-in-ns","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",20,"^1C",["^1<",[["^1M","^24","^28","^2V"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",663,"^19",663,"^1F",4,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","^28","^2V"]]]]]],"~$make-js-eval-fn",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",114,"^18",7,"^19",114,"^1:",22,"^1;",["^1<",["^1=",["^1<",[["^1M"]]]]],"^1@","Makes an eval function that will be used to eval JavaScript code. It returns\n  a cljs.js-compatible *eval-fn*. Expects a map of user options, specifically:\n\n  * :cache - a map containing an optional :path key which indicates the path\n  in which write the cached files. If not empty, the function will first write\n  the cached files and then eval the source, otherwise only the latter\n  * write-file-fn! - a synchronous 2-arity function which expects the path and\n  data to write."],"^9","~$replumb.repl/make-js-eval-fn","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",22,"^1C",["^1<",[["^1M"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",114,"^19",114,"^1F",1,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M"]]]]],"^1@","Makes an eval function that will be used to eval JavaScript code. It returns\n  a cljs.js-compatible *eval-fn*. Expects a map of user options, specifically:\n\n  * :cache - a map containing an optional :path key which indicates the path\n  in which write the cached files. If not empty, the function will first write\n  the cached files and then eval the source, otherwise only the latter\n  * write-file-fn! - a synchronous 2-arity function which expects the path and\n  data to write."],"~$reset-last-warning!",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",436,"^18",7,"^19",436,"^1:",26,"^1;",["^1<",["^1=",["^1<",[[]]]]]],"^9","~$replumb.repl/reset-last-warning!","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",26,"^1C",["^1<",[[]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",436,"^19",436,"^1F",0,"^1G",true,"^1;",["^1<",["^1=",["^1<",[[]]]]]],"~$process-doc",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",634,"^18",7,"^19",634,"^1:",18,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","^28","^2<"]]]]]],"^9","~$replumb.repl/process-doc","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",18,"^1C",["^1<",[["^1M","^24","^28","^2<"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",634,"^19",634,"^1F",4,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","^28","^2<"]]]]]],"~$normalize-opts",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",399,"^18",7,"^19",399,"^1:",21,"^1;",["^1<",["^1=",["^1<",[["^1S"]]]]],"^1@","Process the user options. Returns the map that can be fed to\n  read-eval-call."],"^9","~$replumb.repl/normalize-opts","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",21,"^1C",["^1<",[["^1S"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",399,"^19",399,"^1F",1,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1S"]]]]],"^1@","Process the user options. Returns the map that can be fed to\n  read-eval-call."],"~$call-back!",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",512,"^18",7,"^19",512,"^1:",17,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","^2F"],["^1M","^24","^28","^2F"]]]]],"^1@","Handles the evaluation result, calling the callback in the right way,\n  based on the success or error of the evaluation. The res parameter\n  expects the same map as ClojureScript's cljs.js callback,\n  :value if success and :error if not. The data parameter might contain\n  additional stuff:\n\n  * :form the source form that has been eval-ed\n  * :on-success-fn! 0-arity function that will be executed on success\n  * :on-error-fn! 0-arity function that will be executed on error\n  * :side-effect-fn! 0-arity function that if present will be executed\n  for both success and error, effectively disabling the individual\n  on-success-fn! and on-error-fn!\n\n  Call-back! supports the following opts:\n\n  * :verbose will enable the evaluation logging, defaults to false.\n  * :no-pr-str-on-value avoids wrapping successful value in a pr-str\n  * :warning-as-error will consider a warning like an error\n\n  Notes:\n  1. The opts map passed here overrides the environment options.\n  2. This function will also clear the :last-eval-warning flag in\n  app-env.\n  3. It will execute (:side-effect-fn!) or (on-success-fn!)\n  and (on-error-fn!)  *before* the callback is called.\n\n  ** Every function in this namespace should call call-back! as\n  single point of exit. **","^1J",["^ ","^1B",false,"^1F",4,"^1C",["^1<",[["^1M","^24","^2F"],["^1M","^24","^28","^2F"]]],"^1;",["^1<",[["^1M","^24","^2F"],["^1M","^24","^28","^2F"]]],"^1E",["^1<",[null,null]]]],"^9","~$replumb.repl/call-back!","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",17,"^1J",["^ ","^1B",false,"^1F",4,"^1C",["^1<",[["^1M","^24","^2F"],["^1M","^24","^28","^2F"]]],"^1;",["^1<",[["^1M","^24","^2F"],["^1M","^24","^28","^2F"]]],"^1E",["^1<",[null,null]]],"^1C",["^1<",[["^1M","^24","^2F"],["^1M","^24","^28","^2F"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",512,"^19",512,"^1F",4,"^1G",true,"^1;",["^1<",[["^1M","^24","^2F"],["^1M","^24","^28","^2F"]]],"^1@","Handles the evaluation result, calling the callback in the right way,\n  based on the success or error of the evaluation. The res parameter\n  expects the same map as ClojureScript's cljs.js callback,\n  :value if success and :error if not. The data parameter might contain\n  additional stuff:\n\n  * :form the source form that has been eval-ed\n  * :on-success-fn! 0-arity function that will be executed on success\n  * :on-error-fn! 0-arity function that will be executed on error\n  * :side-effect-fn! 0-arity function that if present will be executed\n  for both success and error, effectively disabling the individual\n  on-success-fn! and on-error-fn!\n\n  Call-back! supports the following opts:\n\n  * :verbose will enable the evaluation logging, defaults to false.\n  * :no-pr-str-on-value avoids wrapping successful value in a pr-str\n  * :warning-as-error will consider a warning like an error\n\n  Notes:\n  1. The opts map passed here overrides the environment options.\n  2. This function will also clear the :last-eval-warning flag in\n  app-env.\n  3. It will execute (:side-effect-fn!) or (on-success-fn!)\n  and (on-error-fn!)  *before* the callback is called.\n\n  ** Every function in this namespace should call call-back! as\n  single point of exit. **"],"~$error-map",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",428,"^18",7,"^19",428,"^1:",16,"^1;",["^1<",["^1=",["^1<",[["^1M","^1N","^1O","~$error"]]]]],"^1@","Builds the map to return when the evaluation returned error."],"^9","~$replumb.repl/error-map","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",16,"^1C",["^1<",[["^1M","^1N","^1O","^37"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",428,"^19",428,"^1F",4,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M","^1N","^1O","^37"]]]]],"^1@","Builds the map to return when the evaluation returned error."],"~$read",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",55,"^18",7,"^19",55,"^1:",11,"^1;",["^1<",["^1=",["^1<",[["^1M","~$rdr"]]]]],"^1@","Reading forms from a reader (see clojure.tools.reader.reader-types\n  for reader implementations). This function throws if a valid form\n  cannot be found."],"^9","~$replumb.repl/read","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",11,"^1C",["^1<",[["^1M","^3:"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",55,"^19",55,"^1F",2,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M","^3:"]]]]],"^1@","Reading forms from a reader (see clojure.tools.reader.reader-types\n  for reader implementations). This function throws if a valid form\n  cannot be found."],"~$ns-form?",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",76,"^18",7,"^19",76,"^1:",15,"^1;",["^1<",["^1=",["^1<",[["^1N"]]]]]],"^9","~$replumb.repl/ns-form?","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",15,"^1C",["^1<",[["^1N"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",76,"^19",76,"^1F",1,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1N"]]]]]],"~$init-repl-if-necessary!",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",876,"^18",7,"^19",876,"^1:",30,"^1;",["^1<",["^1=",["^1<",[["^1M","^28"]]]]]],"^9","~$replumb.repl/init-repl-if-necessary!","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",30,"^1C",["^1<",[["^1M","^28"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",876,"^19",876,"^1F",2,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M","^28"]]]]]],"~$initializing-state",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",828,"^18",7,"^19",828,"^1:",25,"^1;",["^1<",["^1=",["^1<",[["^1V"]]]]],"^1@","If we are not already :initializing? and :needs-init? is true, then\n  move to the \"Initializing\" state, signaling that the init is in\n  progress."],"^9","~$replumb.repl/initializing-state","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",25,"^1C",["^1<",[["^1V"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",828,"^19",828,"^1F",1,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1V"]]]]],"^1@","If we are not already :initializing? and :needs-init? is true, then\n  move to the \"Initializing\" state, signaling that the init is in\n  progress."],"~$self-require?",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",166,"^18",7,"^19",166,"^1:",20,"^1;",["^1<",["^1=",["^1<",[["^2R"]]]]]],"^9","~$replumb.repl/self-require?","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",20,"^1C",["^1<",[["^2R"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",166,"^19",166,"^1F",1,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^2R"]]]]]],"~$process-pst",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",649,"^18",7,"^19",649,"^1:",18,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","^28","~$expr"]]]]]],"^9","~$replumb.repl/process-pst","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",18,"^1C",["^1<",[["^1M","^24","^28","^3E"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",649,"^19",649,"^1F",4,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","^28","^3E"]]]]]],"~$add-init-fns",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",384,"^18",7,"^19",384,"^1:",19,"^1;",["^1<",["^1=",["^1<",[["^1M","^1S"]]]]],"^1@","Given current and user options, returns a map containing a\n  valid :init-fns,conjoining with the one in current if necessary."],"^9","~$replumb.repl/add-init-fns","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",19,"^1C",["^1<",[["^1M","^1S"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",384,"^19",384,"^1F",2,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M","^1S"]]]]],"^1@","Given current and user options, returns a map containing a\n  valid :init-fns,conjoining with the one in current if necessary."],"~$add-default-opts",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",365,"^18",7,"^19",365,"^1:",23,"^1;",["^1<",["^1=",["^1<",[["^1M","^1S"]]]]],"^1@","Given user provided options, conjoins the default option map for\n  its :target (string or keyword). Defaults to conjoining :default (browser,\n  aka :js target)."],"^9","~$replumb.repl/add-default-opts","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",23,"^1C",["^1<",[["^1M","^1S"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",365,"^19",365,"^1F",2,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M","^1S"]]]]],"^1@","Given user provided options, conjoins the default option map for\n  its :target (string or keyword). Defaults to conjoining :default (browser,\n  aka :js target)."],"~$purge-namespaces!",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",221,"^18",7,"^19",221,"^1:",24,"^1;",["^1<",["^1=",["^1<",[["~$requirer-ns","^1I"]]]]],"^1@","Remove all the namespace references, symbols included, required from\n  inside the input requirer-ns namespace.\n\n  For instance after evaluating:\n\n  (in-ns 'cljs.user)         ;; requirer-ns\n  (require 'clojure.string)  ;; required-ns\n\n  You can eval the following to clean the compiler state:\n\n  (replumb.repl/purge-require 'cljs.user 'clojure.string).\n\n  Note that doing this manually is tricky, as, for instance,\n  clojure.string has the following dependencies to clear: goog.string\n  goog.string.StringBuffer."],"^9","~$replumb.repl/purge-namespaces!","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",24,"^1C",["^1<",[["^3L","^1I"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",221,"^19",221,"^1F",2,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^3L","^1I"]]]]],"^1@","Remove all the namespace references, symbols included, required from\n  inside the input requirer-ns namespace.\n\n  For instance after evaluating:\n\n  (in-ns 'cljs.user)         ;; requirer-ns\n  (require 'clojure.string)  ;; required-ns\n\n  You can eval the following to clean the compiler state:\n\n  (replumb.repl/purge-require 'cljs.user 'clojure.string).\n\n  Note that doing this manually is tricky, as, for instance,\n  clojure.string has the following dependencies to clear: goog.string\n  goog.string.StringBuffer."],"~$get-var",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",100,"^18",7,"^19",100,"^1:",14,"^1;",["^1<",["^1=",["^1<",[["^1M","^T","^2<"]]]]]],"^9","~$replumb.repl/get-var","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",14,"^1C",["^1<",[["^1M","^T","^2<"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",100,"^19",100,"^1F",3,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M","^T","^2<"]]]]]],"~$process-load-file",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",787,"^18",7,"^19",787,"^1:",24,"^1;",["^1<",["^1=",["^1<",[[["^ ","^1[",["^20","^21","^2?"],"^2@","^1M"],"^24","^28","~$file-name"]]]]]],"^9","~$replumb.repl/process-load-file","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",24,"^1C",["^1<",[["~$p__67483","^24","^28","^3Q"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",787,"^19",787,"^1F",4,"^1G",true,"^1;",["^1<",["^1=",["^1<",[[["^ ","^1[",["^20","^21","^2?"],"^2@","^1M"],"^24","^28","^3Q"]]]]]],"~$map-keys",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",51,"^18",7,"^19",51,"^1:",15,"^1;",["^1<",["^1=",["^1<",[["~$f","~$m"]]]]]],"^9","~$replumb.repl/map-keys","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",15,"^1C",["^1<",[["~$f","~$m"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",51,"^19",51,"^1F",2,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["~$f","~$m"]]]]]],"~$process-find-doc",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",752,"^18",7,"^19",752,"^1:",23,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","^28","~$re-string-or-pattern"]]]]]],"^9","~$replumb.repl/process-find-doc","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",23,"^1C",["^1<",[["^1M","^24","^28","^3W"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",752,"^19",752,"^1F",4,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","^28","^3W"]]]]]],"~$process-source",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",715,"^18",7,"^19",715,"^1:",21,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","^28","^2<"]]]]]],"^9","~$replumb.repl/process-source","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",21,"^1C",["^1<",[["^1M","^24","^28","^2<"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",715,"^19",715,"^1F",4,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","^28","^2<"]]]]]],"~$add-load-fn",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",374,"^18",7,"^19",374,"^1:",18,"^1;",["^1<",["^1=",["^1<",[["^1M","^1S"]]]]],"^1@","Given current and user options, if :load-fn! is present in user-opts,\n  conjoins it. Try to create and conjoin one from :src-paths\n  and :read-file-fn! otherwise. Conjoins nil if it cannot."],"^9","~$replumb.repl/add-load-fn","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",18,"^1C",["^1<",[["^1M","^1S"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",374,"^19",374,"^1F",2,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M","^1S"]]]]],"^1@","Given current and user options, if :load-fn! is present in user-opts,\n  conjoins it. Try to create and conjoin one from :src-paths\n  and :read-file-fn! otherwise. Conjoins nil if it cannot."],"~$repl-special?",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",110,"^18",7,"^19",110,"^1:",20,"^1;",["^1<",["^1=",["^1<",[["^1N"]]]]]],"^9","~$replumb.repl/repl-special?","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",20,"^1C",["^1<",[["^1N"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",110,"^19",110,"^1F",1,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1N"]]]]]],"~$last-form",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",776,"^18",7,"^19",776,"^1:",16,"^1;",["^1<",["^1=",["^1<",[["~$source"]]]]]],"^9","~$replumb.repl/last-form","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",16,"^1C",["^1<",[["^44"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",776,"^19",776,"^1F",1,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^44"]]]]]],"~$file-path-from-goog-dependencies",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",278,"^18",7,"^19",278,"^1:",39,"^1;",["^1<",["^1=",["^1<",[["^1>"]]]]],"^1@","Retrives the path for a file from (.-dependencies_.nameToPath js/goog). If\n  not found will returns nil."],"^9","~$replumb.repl/file-path-from-goog-dependencies","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",39,"^1C",["^1<",[["^1>"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",278,"^19",278,"^1F",1,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1>"]]]]],"^1@","Retrives the path for a file from (.-dependencies_.nameToPath js/goog). If\n  not found will returns nil."],"~$process-require",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",602,"^18",7,"^19",602,"^1:",22,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","^28","^2Q","^2R"]]]]]],"^9","~$replumb.repl/process-require","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",22,"^1C",["^1<",[["^1M","^24","^28","^2Q","^2R"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",602,"^19",602,"^1F",5,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","^28","^2Q","^2R"]]]]]],"~$validated-init-fn!",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",467,"^18",7,"^19",467,"^1:",25,"^1;",["^1<",["^1=",["^1<",[["~$init-fn!","^2F"]]]]]],"^9","~$replumb.repl/validated-init-fn!","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",25,"^1C",["^1<",[["^4;","^2F"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",467,"^19",467,"^1F",2,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^4;","^2F"]]]]]],"~$warning-error-map!",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",485,"^18",7,"^19",485,"^1:",25,"^1;",["^1<",["^1=",["^1<",[["^1M",["^ ","^1[",["^37"],"^2@","~$orig"]]]]]],"^1@","Checks if there has been a warning and if so will return a new result\n  map instead of the input one, potentially with a :warning key\n  containing the warning message in it.\n\n  The code paths are the following:\n\n  - if the input map was already an :error, there will be no warning,\n  the original :error is returned.\n  - if the input map was a :value:\n    - if (:warning-as-error opts) is truey, the new map will always\n      contain it as :error, overriding the original.\n    - if (:warning-as-error opts) is falsey, the new map will contain\n      the warning as :warning along with the original :value"],"^9","~$replumb.repl/warning-error-map!","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",25,"^1C",["^1<",[["^1M","~$p__67383"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",485,"^19",485,"^1F",2,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M",["^ ","^1[",["^37"],"^2@","^4>"]]]]]],"^1@","Checks if there has been a warning and if so will return a new result\n  map instead of the input one, potentially with a :warning key\n  containing the warning message in it.\n\n  The code paths are the following:\n\n  - if the input map was already an :error, there will be no warning,\n  the original :error is returned.\n  - if the input map was a :value:\n    - if (:warning-as-error opts) is truey, the new map will always\n      contain it as :error, overriding the original.\n    - if (:warning-as-error opts) is falsey, the new map will contain\n      the warning as :warning along with the original :value"],"~$load-eval-opts!",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",160,"^18",7,"^19",160,"^1:",22,"^1;",["^1<",["^1=",["^1<",[["^1S","^3Q"]]]]]],"^9","~$replumb.repl/load-eval-opts!","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",22,"^1C",["^1<",[["^1S","^3Q"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",160,"^19",160,"^1F",2,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1S","^3Q"]]]]]],"~$init-repl!",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",860,"^18",7,"^19",860,"^1:",17,"^1;",["^1<",["^1=",["^1<",[["^1M","^28"]]]]],"^1@","The init-repl function. It uses the following opts keys:\n\n  * :init-fns initialization function vector, it will be executed in\n  order\n\n  Data is passed from outside and will be forwarded to :init-fn!.\n\n  This is a sync method and should not leak any async operation."],"^9","~$replumb.repl/init-repl!","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",17,"^1C",["^1<",[["^1M","^28"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",860,"^19",860,"^1F",2,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M","^28"]]]]],"^1@","The init-repl function. It uses the following opts keys:\n\n  * :init-fns initialization function vector, it will be executed in\n  order\n\n  Data is passed from outside and will be forwarded to :init-fn!.\n\n  This is a sync method and should not leak any async operation."],"~$process-1-2-3",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",562,"^18",7,"^19",562,"^1:",20,"^1;",["^1<",["^1=",["^1<",[["^28","~$expression-form","^1P"]]]]]],"^9","~$replumb.repl/process-1-2-3","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",20,"^1C",["^1<",[["^28","^4F","^1P"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",562,"^19",562,"^1F",3,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^28","^4F","^1P"]]]]]],"~$empty-analyzer-env",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",45,"^18",7,"^19",45,"^1:",25,"^1;",["^1<",["^1=",["^1<",[[]]]]]],"^9","~$replumb.repl/empty-analyzer-env","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",25,"^1C",["^1<",[[]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",45,"^19",45,"^1F",0,"^1G",true,"^1;",["^1<",["^1=",["^1<",[[]]]]]],"~$purge-required-ns!",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",196,"^18",7,"^19",196,"^1:",25,"^1;",["^1<",["^1=",["^1<",[["~$required-ns"]]]]],"^1@","Remove all the references to the given namespace in the compiler\n  state."],"^9","~$replumb.repl/purge-required-ns!","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",25,"^1C",["^1<",[["^4K"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",196,"^19",196,"^1F",1,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^4K"]]]]],"^1@","Remove all the references to the given namespace in the compiler\n  state."],"~$read-string",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",66,"^18",7,"^19",66,"^1:",18,"^1;",["^1<",["^1=",["^1<",[["^1M","~$s"]]]]],"^1@","Reading forms from a string. This function throws if a valid one\n  cannot be found."],"^9","~$replumb.repl/read-string","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",18,"^1C",["^1<",[["^1M","~$s"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",66,"^19",66,"^1F",2,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M","~$s"]]]]],"^1@","Reading forms from a string. This function throws if a valid one\n  cannot be found."],"~$valid-opts-set",["^ ","^9","~$replumb.repl/valid-opts-set","^16","resources/public/cards/js/replumb/repl.cljs","^17",352,"^18",1,"^19",352,"^1:",20,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",352,"^18",6,"^19",352,"^1:",20],"^1@","Set of valid option used for external input validation."],"~$call-side-effect!",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",475,"^18",7,"^19",475,"^1:",24,"^1;",["^1<",["^1=",["^1<",[["^28",["^ ","^1[",["^1P","^37"]]]]]]],"^1@","Execute the correct side effecting function from data.\n  Handles :side-effect-fn!, :on-error-fn! and :on-success-fn!."],"^9","~$replumb.repl/call-side-effect!","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",24,"^1C",["^1<",[["^28","~$p__67378"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",475,"^19",475,"^1F",2,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^28",["^ ","^1[",["^1P","^37"]]]]]]],"^1@","Execute the correct side effecting function from data.\n  Handles :side-effect-fn!, :on-error-fn! and :on-success-fn!."],"~$ex-info-data",["^ ","^9","~$replumb.repl/ex-info-data","^16","resources/public/cards/js/replumb/repl.cljs","^17",38,"^18",1,"^19",38,"^1:",18,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",38,"^18",6,"^19",38,"^1:",18],"^1@","The ex-info data for this file"],"~$st",["^ ","^9","~$replumb.repl/st","^16","resources/public/cards/js/replumb/repl.cljs","^17",27,"^18",1,"^19",27,"^1:",12,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",27,"^18",10,"^19",27,"^1:",12]],"~$current-ns",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",40,"^18",7,"^19",40,"^1:",17,"^1;",["^1<",["^1=",["^1<",[[]]]]],"^1@","Return the current namespace, as a symbol."],"^9","~$replumb.repl/current-ns","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",17,"^1C",["^1<",[[]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",40,"^19",40,"^1F",0,"^1G",true,"^1;",["^1<",["^1=",["^1<",[[]]]]],"^1@","Return the current namespace, as a symbol."],"~$force-init!",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",853,"^18",7,"^19",853,"^1:",18,"^1;",["^1<",["^1=",["^1<",[[]]]]],"^1@","Force the initialization at the next read-eval-call. Use this every\n  time an option that needs to be read at initialization time changes,\n  e.g. :source-path. In the future this will be automated."],"^9","~$replumb.repl/force-init!","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",18,"^1C",["^1<",[[]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",853,"^19",853,"^1F",0,"^1G",true,"^1;",["^1<",["^1=",["^1<",[[]]]]],"^1@","Force the initialization at the next read-eval-call. Use this every\n  time an option that needs to be read at initialization time changes,\n  e.g. :source-path. In the future this will be automated."],"~$eval-str*",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",570,"^18",7,"^19",570,"^1:",16,"^1;",["^1<",["^1=",["^1<",[["~$eval-opts","^1S","^24","^28","^44"]]]]],"^1@","Custom version of cljs.js/eval-str. The only difference is in the\n  spitting of eval-opts, which is the map which the actual\n  cljs.js/eval-str needs and usually built by base-eval-opts!, and\n  user-opts, passed through read-eval-call (same keys supported).\n\n  Additionally, eval-opts might contain:\n\n  * :file-name In case of file loading, indicates its name\n  * :on-success-fn! 1-arity function that will be executed on success,\n  the input is the evaluation result\n  * :on-error-fn! 1-arity function that will be executed on error, the\n  input is the evaluation result\n  * :side-effect-fn! 1-arity function that if present will be executed\n  for both success and error, effectively disabling the individual\n  on-success-fn! and on-error-fn!. The input is the evaluation result"],"^9","~$replumb.repl/eval-str*","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",16,"^1C",["^1<",[["^51","^1S","^24","^28","^44"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",570,"^19",570,"^1F",5,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^51","^1S","^24","^28","^44"]]]]],"^1@","Custom version of cljs.js/eval-str. The only difference is in the\n  spitting of eval-opts, which is the map which the actual\n  cljs.js/eval-str needs and usually built by base-eval-opts!, and\n  user-opts, passed through read-eval-call (same keys supported).\n\n  Additionally, eval-opts might contain:\n\n  * :file-name In case of file loading, indicates its name\n  * :on-success-fn! 1-arity function that will be executed on success,\n  the input is the evaluation result\n  * :on-error-fn! 1-arity function that will be executed on error, the\n  input is the evaluation result\n  * :side-effect-fn! 1-arity function that if present will be executed\n  for both success and error, effectively disabling the individual\n  on-success-fn! and on-error-fn!. The input is the evaluation result"],"~$app-env",["^ ","^9","~$replumb.repl/app-env","^16","resources/public/cards/js/replumb/repl.cljs","^17",29,"^18",1,"^19",29,"^1:",17,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",29,"^18",10,"^19",29,"^1:",17]],"~$process-repl-special",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",806,"^18",7,"^19",806,"^1:",27,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","^28","^4F"]]]]]],"^9","~$replumb.repl/process-repl-special","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",27,"^1C",["^1<",[["^1M","^24","^28","^4F"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",806,"^19",806,"^1F",4,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","^28","^4F"]]]]]],"~$resolve",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",86,"^18",7,"^19",86,"^1:",14,"^1;",["^1<",["^1=",["^1<",[["^1M","^T","^2<"]]]]],"^1@","From cljs.analyzer.api.clj. Given an analysis environment resolve a\n  var. Analogous to clojure.core/resolve"],"^9","~$replumb.repl/resolve","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",14,"^1C",["^1<",[["^1M","^T","^2<"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",86,"^19",86,"^1F",3,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M","^T","^2<"]]]]],"^1@","From cljs.analyzer.api.clj. Given an analysis environment resolve a\n  var. Analogous to clojure.core/resolve"],"~$purge-symbols!",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",210,"^18",7,"^19",210,"^1:",21,"^1;",["^1<",["^1=",["^1<",[["^3L","^4K"]]]]],"^1@","Get rid of all the compiler state references to required-ns macros\n  namespaces and symbols from requirer-ns."],"^9","~$replumb.repl/purge-symbols!","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",21,"^1C",["^1<",[["^3L","^4K"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",210,"^19",210,"^1F",2,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^3L","^4K"]]]]],"^1@","Get rid of all the compiler state references to required-ns macros\n  namespaces and symbols from requirer-ns."],"~$macro?",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",80,"^18",7,"^19",80,"^1:",13,"^1;",["^1<",["^1=",["^1<",[["^22"]]]]],"^1@","Is the input analyzer var (from either cljs.analyzer/resolve-var or\n  cljs.analyzer/resolve-macro-var) a macro?"],"^9","~$replumb.repl/macro?","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",13,"^1C",["^1<",[["^22"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",80,"^19",80,"^1F",1,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^22"]]]]],"^1@","Is the input analyzer var (from either cljs.analyzer/resolve-var or\n  cljs.analyzer/resolve-macro-var) a macro?"],"~$replumb-repl-special-set",["^ ","^9","~$replumb.repl/replumb-repl-special-set","^16","resources/public/cards/js/replumb/repl.cljs","^17",107,"^18",1,"^19",107,"^1:",30,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",107,"^18",6,"^19",107,"^1:",30]],"~$process-reloads!",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",252,"^18",7,"^19",252,"^1:",23,"^1;",["^1<",["^1=",["^1<",[["^2R"]]]]]],"^9","~$replumb.repl/process-reloads!","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",23,"^1C",["^1<",[["^2R"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",252,"^19",252,"^1F",1,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^2R"]]]]]],"~$canonicalize-specs",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",178,"^18",7,"^19",178,"^1:",25,"^1;",["^1<",["^1=",["^1<",[["^2R"]]]]]],"^9","~$replumb.repl/canonicalize-specs","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",25,"^1C",["^1<",[["^2R"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",178,"^19",178,"^1F",1,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^2R"]]]]]],"~$base-eval-opts!",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",144,"^18",7,"^19",144,"^1:",22,"^1;",["^1<",["^1=",["^1<",[[],["^1S"]]]]],"^1@","Gets the base set of evaluation options. The 1-arity function\n  specifies opts that override default. No check here if opts are\n  valid.","^1J",["^ ","^1B",false,"^1F",1,"^1C",["^1<",[[],["^1S"]]],"^1;",["^1<",[[],["^1S"]]],"^1E",["^1<",[null,null]]]],"^9","~$replumb.repl/base-eval-opts!","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",22,"^1J",["^ ","^1B",false,"^1F",1,"^1C",["^1<",[[],["^1S"]]],"^1;",["^1<",[[],["^1S"]]],"^1E",["^1<",[null,null]]],"^1C",["^1<",[[],["^1S"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",144,"^19",144,"^1F",1,"^1G",true,"^1;",["^1<",[[],["^1S"]]],"^1@","Gets the base set of evaluation options. The 1-arity function\n  specifies opts that override default. No check here if opts are\n  valid."],"~$read-eval-call",["^ ","^14",null,"^15",["^ ","^16","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/repl.cljs","^17",886,"^18",7,"^19",886,"^1:",21,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","^44"]]]]],"^1@","Reads, evaluates and calls back with the evaluation result.\n\n  The first parameter is a map of configuration options, currently\n  supporting:\n\n  * :verbose - will enable the evaluation logging, defaults to false.\n  To customize how to print, use (set! *print-fn* (fn [& args] ...)\n\n  * :warning-as-error - will consider a compiler warning as error.\n\n  * :target - :nodejs and :browser supported, the latter is used if\n  missing.\n\n  * :init-fn! - user provided initialization function, it will be passed\n  a map of data currently containing:\n\n      :form   ;; the form to evaluate, as data, past the reader step\n      :ns     ;; the current namespace, as symbol\n      :target ;; *target* as keyword, :default is the default\n\n  * :load-fn! - will override replumb's default cljs.js/*load-fn*.\n  It rules out :read-file-fn!, losing any perk of using replumb.load\n  helpers. Use it if you know what you are doing and keep in mind\n  that :load-fn! is never used with load-file. It is the only case where\n  it does not take precedence over :read-file-fn!.\n\n  * :read-file-fn! an asynchronous 2-arity function with signature\n  [file-path src-cb] where src-cb is itself a function (fn [source] ...)\n  that needs to be called with the file content as string (nil if no\n  file is found). It is mutually exclusive with :load-fn! and will be\n  ignored in case both are present.\n\n  * :write-file-fn! a synchronous 2-arity function with signature\n  [file-path data] that accepts a file-path and data to write.\n\n  * :src-paths - a vector of paths containing source files.\n\n  * :cache - a map containing two optional values: the first, :path, indicates\n  the path of the cached files. The second, :src-paths-lookup?, indicates\n  if look for cached files in :src-paths. If both present, :path will have\n  the priority but both will be inspected.\n\n  * :no-pr-str-on-value - in case of :success? avoid converting the\n  result map :value to string.\n\n  * :context - indicates the evaluation context that will be passed to\n  cljs/eval-str. One in :expr, :statement, :return. Defaults to :expr.\n\n  * :foreign-libs - a way to include foreign libraries. The format is analogous\n  to the compiler option.\n\n  * :static-fns - static dispatch in generated JavaScript.\n\n  The second parameter cb, is a 1-arity function which receives the\n  result map.\n\n  Therefore, given cb (fn [result-map] ...), the main map keys are:\n\n  :success? - a boolean indicating if everything went right\n  :value    - (if (:success? result)), this key contains the yielded value as\n              string, unless :no-pr-str-on-value is true, in which case it\n              returns the bare value.\n  :error    - (if-not (:success? result)) will contain a js/Error\n  :warning  - in case a warning was thrown and :warning-as-error is falsey\n  :form     - the evaluated form as data structure (not a string)\n\n  The third parameter is the source string to be read and evaluated."],"^9","~$replumb.repl/read-eval-call","^1B",false,"^16","resources/public/cards/js/replumb/repl.cljs","^1:",21,"^1C",["^1<",[["^1M","^24","^44"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",886,"^19",886,"^1F",3,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1M","^24","^44"]]]]],"^1@","Reads, evaluates and calls back with the evaluation result.\n\n  The first parameter is a map of configuration options, currently\n  supporting:\n\n  * :verbose - will enable the evaluation logging, defaults to false.\n  To customize how to print, use (set! *print-fn* (fn [& args] ...)\n\n  * :warning-as-error - will consider a compiler warning as error.\n\n  * :target - :nodejs and :browser supported, the latter is used if\n  missing.\n\n  * :init-fn! - user provided initialization function, it will be passed\n  a map of data currently containing:\n\n      :form   ;; the form to evaluate, as data, past the reader step\n      :ns     ;; the current namespace, as symbol\n      :target ;; *target* as keyword, :default is the default\n\n  * :load-fn! - will override replumb's default cljs.js/*load-fn*.\n  It rules out :read-file-fn!, losing any perk of using replumb.load\n  helpers. Use it if you know what you are doing and keep in mind\n  that :load-fn! is never used with load-file. It is the only case where\n  it does not take precedence over :read-file-fn!.\n\n  * :read-file-fn! an asynchronous 2-arity function with signature\n  [file-path src-cb] where src-cb is itself a function (fn [source] ...)\n  that needs to be called with the file content as string (nil if no\n  file is found). It is mutually exclusive with :load-fn! and will be\n  ignored in case both are present.\n\n  * :write-file-fn! a synchronous 2-arity function with signature\n  [file-path data] that accepts a file-path and data to write.\n\n  * :src-paths - a vector of paths containing source files.\n\n  * :cache - a map containing two optional values: the first, :path, indicates\n  the path of the cached files. The second, :src-paths-lookup?, indicates\n  if look for cached files in :src-paths. If both present, :path will have\n  the priority but both will be inspected.\n\n  * :no-pr-str-on-value - in case of :success? avoid converting the\n  result map :value to string.\n\n  * :context - indicates the evaluation context that will be passed to\n  cljs/eval-str. One in :expr, :statement, :return. Defaults to :expr.\n\n  * :foreign-libs - a way to include foreign libraries. The format is analogous\n  to the compiler option.\n\n  * :static-fns - static dispatch in generated JavaScript.\n\n  The second parameter cb, is a 1-arity function which receives the\n  result map.\n\n  Therefore, given cb (fn [result-map] ...), the main map keys are:\n\n  :success? - a boolean indicating if everything went right\n  :value    - (if (:success? result)), this key contains the yielded value as\n              string, unless :no-pr-str-on-value is true, in which case it\n              returns the bare value.\n  :error    - (if-not (:success? result)) will contain a js/Error\n  :warning  - in case a warning was thrown and :warning-as-error is falsey\n  :form     - the evaluated form as data structure (not a string)\n\n  The third parameter is the source string to be read and evaluated."]],"~:require-macros",["^ ","^2","^2","^>","^?","^?","^?","^[","^Y","^Y","^Y","^O","^O"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~$&","~:load","~:path","~:features","~:user-opts","~:read-file-fn!","~$try","~$doc","~$import","~:init-fns","^15","~:static-fns","~:else","~$*2","~:macro-require","~:macros","~$finally","~:default","~:ns","~:symbol","~:def-emits-var","^9","^2@","~:value","^16","~:side-effect-fn!","~$find-doc","~:require","~:extra","~:warning-type","~$fn","~:write-file-fn!","~:nodejs","~:read-cond","~:initializing?","~:verbose","~$dir","~$*1","~$pst","~:source","~:env","~:last-eval-warning","~$in-ns","~:merge","~:allow","~$ns","^18","~:warning","~$require","~:cache","~:no-pr-str-on-value","~$*e","~:needs-init?","^17","~:expr","~:macro","^44","~:current-ns","~:opts","~:kind","~:file-name","~:warning-as-error","~:url","~:replumb.repl/error","~:src-paths-lookup?","~:source-map","~:context","~:reload","~:foreign-libs","~:provides","~:error","~:reload-all","^5G","^8","~:form","~:load-fn!","~$*3","~:tag","~:res","~:target","^1=","^1;","~:import","~:eof","~$catch","^1@","~:success?","~:cljs","~:on-success-fn!","~:src-paths","~:init-fn!","~:on-error-fn!","~:forms","~$require-macros","~$apropos","~$cljs.user","~:data","~:eval"]],"~:order",["^6O","^6B","^6;","^6L","^7D","^75","^6U","^5Z","^6X","^6M","^6F","^6N","^6J","^6<","^5Y","^9","^5P","^5Q","^63","^6=","^6?","^6C","^6H","^44","^8","^7B","^7C","^5K","^6@","^6I","^68","^6W","^60","^5J","^7F","^5S","^73","^6R","^64","^5V","^5[","^78","^6Y","^71","^6D","^17","^18","^6[","^16","^7>","^5N","^6Z","^2@","^5M","^5W","^5T","^6V","^6S","^77","^7?","^69","^5R","^7;","^72","^6G","^61","^70","^66","^6A","^65","^62","^7=","^7@","^6P","^7E","^76","^5U","^6>","^6K","^74","^1=","^6Q","~$&","^7:","^5X","^67","^5O","^1@","^6:","^5L","^6E","^7<","^15","^7A","^1;","^6T","^79","^5G"]],"^1@",null]