["^ ","~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$replumb.common","~:imports",null,"~:requires",["^ ","~$string","~$clojure.string","^8","^8"],"~:uses",null,"~:defs",["^ ","~$error-branch?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/common.cljs","~:line",5,"~:column",7,"~:end-line",5,"~:end-column",20,"~:arglists",["~#list",["~$quote",["^D",[["~$error"]]]]]],"^3","~$replumb.common/error-branch?","~:variadic",false,"^>","resources/public/cards/js/replumb/common.cljs","^B",20,"~:method-params",["^D",[["^F"]]],"~:protocol-impl",null,"~:arglists-meta",["^D",[null,null]],"^@",1,"^?",5,"^A",5,"~:max-fixed-arity",1,"~:fn-var",true,"^C",["^D",["^E",["^D",[["^F"]]]]]],"~$error-seq",["^ ","^<",null,"^=",["^ ","^>","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/common.cljs","^?",13,"^@",7,"^A",13,"^B",16,"^C",["^D",["^E",["^D",[["^F"]]]]]],"^3","~$replumb.common/error-seq","^H",false,"^>","resources/public/cards/js/replumb/common.cljs","^B",16,"^I",["^D",[["^F"]]],"^J",null,"^K",["^D",[null,null]],"^@",1,"^?",13,"^A",13,"^L",1,"^M",true,"^C",["^D",["^E",["^D",[["^F"]]]]]],"~$echo-callback",["^ ","^<",null,"^=",["^ ","^>","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/common.cljs","^?",43,"^@",7,"^A",43,"^B",20,"^C",["^D",["^E",["^D",[["~$result-map"]]]]],"~:doc","Callback that just echoes the result map. It also asserts the correct\n  result format in its post condition. Useful for debugging and\n  testing.","~:post",[["^D",["~$map?","~$%"]],["^D",["~$find","~$%","~:success?"]],["^D",["~$or",["^D",["^U","~$%","~:error"]],["^D",["^U","~$%","~:value"]]]]]],"^3","~$replumb.common/echo-callback","^H",false,"^>","resources/public/cards/js/replumb/common.cljs","^B",20,"^I",["^D",[["^Q"]]],"^J",null,"^K",["^D",[null,null]],"^@",1,"^?",43,"^A",43,"^S",[["^D",["^T","~$%"]],["^D",["^U","~$%","^V"]],["^D",["^W",["^D",["^U","~$%","^X"]],["^D",["^U","~$%","^Y"]]]]],"^L",1,"^M",true,"^C",["^D",["^E",["^D",[["^Q"]]]]],"^R","Callback that just echoes the result map. It also asserts the correct\n  result format in its post condition. Useful for debugging and\n  testing."],"~$filter-fn-keys",["^ ","^<",null,"^=",["^ ","^>","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/common.cljs","^?",102,"^@",7,"^A",102,"^B",21,"^C",["^D",["^E",["^D",[["~$opts"]]]]],"^R","Filter out the option map keys that have -fn in it."],"^3","~$replumb.common/filter-fn-keys","^H",false,"^>","resources/public/cards/js/replumb/common.cljs","^B",21,"^I",["^D",[["^10"]]],"^J",null,"^K",["^D",[null,null]],"^@",1,"^?",102,"^A",102,"^L",1,"^M",true,"^C",["^D",["^E",["^D",[["^10"]]]]],"^R","Filter out the option map keys that have -fn in it."],"~$has-valid-warning?",["^ ","^<",null,"^=",["^ ","^>","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/common.cljs","^?",85,"^@",7,"^A",85,"^B",25,"^C",["^D",["^E",["^D",[["~$result"]]]]]],"^3","~$replumb.common/has-valid-warning?","^H",false,"^>","resources/public/cards/js/replumb/common.cljs","^B",25,"^I",["^D",[["^13"]]],"^J",null,"^K",["^D",[null,null]],"^@",1,"^?",85,"^A",85,"^L",1,"^M",true,"^C",["^D",["^E",["^D",[["^13"]]]]]],"~$normalize-path",["^ ","^<",null,"^=",["^ ","^>","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/common.cljs","^?",120,"^@",7,"^A",120,"^B",21,"^C",["^D",["^E",["^D",[["~$path"]]]]],"^R","Adds a / if missing at the end of the path."],"^3","~$replumb.common/normalize-path","^H",false,"^>","resources/public/cards/js/replumb/common.cljs","^B",21,"^I",["^D",[["^16"]]],"^J",null,"^K",["^D",[null,null]],"^@",1,"^?",120,"^A",120,"^L",1,"^M",true,"^C",["^D",["^E",["^D",[["^16"]]]]],"^R","Adds a / if missing at the end of the path."],"~$error-keyword-not-supported",["^ ","^<",null,"^=",["^ ","^>","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/common.cljs","^?",89,"^@",7,"^A",89,"^B",34,"^C",["^D",["^E",["^D",[["~$keyword","~$ex-info-data"]]]]],"^R","Yields a \"keyword not supported\" error map. Receives the\n  symbol/keyword printed in the message and ex-info data."],"^3","~$replumb.common/error-keyword-not-supported","^H",false,"^>","resources/public/cards/js/replumb/common.cljs","^B",34,"^I",["^D",[["^19","^1:"]]],"^J",null,"^K",["^D",[null,null]],"^@",1,"^?",89,"^A",89,"^L",2,"^M",true,"^C",["^D",["^E",["^D",[["^19","^1:"]]]]],"^R","Yields a \"keyword not supported\" error map. Receives the\n  symbol/keyword printed in the message and ex-info data."],"~$wrap-error",["^ ","^<",null,"^=",["^ ","^>","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/common.cljs","^?",56,"^@",7,"^A",56,"^B",17,"^C",["^D",["^E",["^D",[["~$message"]]]]],"^R","Wraps the message in a error map."],"^3","~$replumb.common/wrap-error","^H",false,"^>","resources/public/cards/js/replumb/common.cljs","^B",17,"^I",["^D",[["^1="]]],"^J",null,"^K",["^D",[null,null]],"^@",1,"^?",56,"^A",56,"^L",1,"^M",true,"^C",["^D",["^E",["^D",[["^1="]]]]],"^R","Wraps the message in a error map."],"~$extract-message",["^ ","^<",null,"^=",["^ ","^>","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/common.cljs","^?",17,"^@",7,"^A",17,"^B",22,"^C",["^D",["^E",["^D",[["~$err"],["~$print-stack?","^1@"],["^1A","~$exclude-error-msg?","^1@"]]]]],"^R","Iteratively extracts messages inside nested #error objects, returns a\n  string.\n\n  If the boolean `exclude-error-msg?` is true, only the messages not\n  marked as \"ERROR\" will be included in the final string.\n\n  If the boolean `print-stack?` is true, the stack will be added\n  to the final string. They both default to false.\n\n  ** Be sure to pass a js/Error object here **","~:top-fn",["^ ","^H",false,"^L",3,"^I",["^D",[["^1@"],["^1A","^1@"],["^1A","^1B","^1@"]]],"^C",["^D",[["^1@"],["^1A","^1@"],["^1A","^1B","^1@"]]],"^K",["^D",[null,null,null]]]],"^3","~$replumb.common/extract-message","^H",false,"^>","resources/public/cards/js/replumb/common.cljs","^B",22,"^1C",["^ ","^H",false,"^L",3,"^I",["^D",[["^1@"],["^1A","^1@"],["^1A","^1B","^1@"]]],"^C",["^D",[["^1@"],["^1A","^1@"],["^1A","^1B","^1@"]]],"^K",["^D",[null,null,null]]],"^I",["^D",[["^1@"],["^1A","^1@"],["^1A","^1B","^1@"]]],"^J",null,"^K",["^D",[null,null,null]],"^@",1,"^?",17,"^A",17,"^L",3,"^M",true,"^C",["^D",[["^1@"],["^1A","^1@"],["^1A","^1B","^1@"]]],"^R","Iteratively extracts messages inside nested #error objects, returns a\n  string.\n\n  If the boolean `exclude-error-msg?` is true, only the messages not\n  marked as \"ERROR\" will be included in the final string.\n\n  If the boolean `print-stack?` is true, the stack will be added\n  to the final string. They both default to false.\n\n  ** Be sure to pass a js/Error object here **"],"~$wrap-success",["^ ","^<",null,"^=",["^ ","^>","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/common.cljs","^?",51,"^@",7,"^A",51,"^B",19,"^C",["^D",["^E",["^D",[["^1="]]]]],"^R","Wraps the message in a success map."],"^3","~$replumb.common/wrap-success","^H",false,"^>","resources/public/cards/js/replumb/common.cljs","^B",19,"^I",["^D",[["^1="]]],"^J",null,"^K",["^D",[null,null]],"^@",1,"^?",51,"^A",51,"^L",1,"^M",true,"^C",["^D",["^E",["^D",[["^1="]]]]],"^R","Wraps the message in a success map."],"~$valid-eval-warning?",["^ ","^<",null,"^=",["^ ","^>","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/common.cljs","^?",80,"^@",7,"^A",80,"^B",26,"^C",["^D",["^E",["^D",[["~$warning"]]]]],"^R","Is the string returned from an evaluation valid?"],"^3","~$replumb.common/valid-eval-warning?","^H",false,"^>","resources/public/cards/js/replumb/common.cljs","^B",26,"^I",["^D",[["^1H"]]],"^J",null,"^K",["^D",[null,null]],"^@",1,"^?",80,"^A",80,"^L",1,"^M",true,"^C",["^D",["^E",["^D",[["^1H"]]]]],"^R","Is the string returned from an evaluation valid?"],"~$error-children",["^ ","^<",null,"^=",["^ ","^>","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/common.cljs","^?",9,"^@",7,"^A",9,"^B",21,"^C",["^D",["^E",["^D",[["^F"]]]]]],"^3","~$replumb.common/error-children","^H",false,"^>","resources/public/cards/js/replumb/common.cljs","^B",21,"^I",["^D",[["^F"]]],"^J",null,"^K",["^D",[null,null]],"^@",1,"^?",9,"^A",9,"^L",1,"^M",true,"^C",["^D",["^E",["^D",[["^F"]]]]]],"~$valid-eval-result?",["^ ","^<",null,"^=",["^ ","^>","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/common.cljs","^?",67,"^@",7,"^A",67,"^B",25,"^C",["^D",["^E",["^D",[["^13"],["^10","^13"]]]]],"^R","Is the string returned from an evaluation valid?","^1C",["^ ","^H",false,"^L",2,"^I",["^D",[["^13"],["^10","^13"]]],"^C",["^D",[["^13"],["^10","^13"]]],"^K",["^D",[null,null]]]],"^3","~$replumb.common/valid-eval-result?","^H",false,"^>","resources/public/cards/js/replumb/common.cljs","^B",25,"^1C",["^ ","^H",false,"^L",2,"^I",["^D",[["^13"],["^10","^13"]]],"^C",["^D",[["^13"],["^10","^13"]]],"^K",["^D",[null,null]]],"^I",["^D",[["^13"],["^10","^13"]]],"^J",null,"^K",["^D",[null,null]],"^@",1,"^?",67,"^A",67,"^L",2,"^M",true,"^C",["^D",[["^13"],["^10","^13"]]],"^R","Is the string returned from an evaluation valid?"],"~$set-cljs-user!",["^ ","^<",null,"^=",["^ ","^>","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/common.cljs","^?",125,"^@",7,"^A",125,"^B",21,"^C",["^D",["^E",["^D",[[]]]]],"^R","Set up the cljs.user namespace"],"^3","~$replumb.common/set-cljs-user!","^H",false,"^>","resources/public/cards/js/replumb/common.cljs","^B",21,"^I",["^D",[[]]],"^J",null,"^K",["^D",[null,null]],"^@",1,"^?",125,"^A",125,"^L",0,"^M",true,"^C",["^D",["^E",["^D",[[]]]]],"^R","Set up the cljs.user namespace"],"~$inline-newline?",["^ ","^<",null,"^=",["^ ","^>","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/common.cljs","^?",61,"^@",7,"^A",61,"^B",22,"^C",["^D",["^E",["^D",[["~$s"]]]]],"^R","Returns true if the string contains the newline \\\\n or \\\\r as\n  characters."],"^3","~$replumb.common/inline-newline?","^H",false,"^>","resources/public/cards/js/replumb/common.cljs","^B",22,"^I",["^D",[["~$s"]]],"^J",null,"^K",["^D",[null,null]],"^@",1,"^?",61,"^A",61,"^L",1,"^M",true,"^C",["^D",["^E",["^D",[["~$s"]]]]],"^R","Returns true if the string contains the newline \\\\n or \\\\r as\n  characters."],"~$debug-prn",["^ ","^<",null,"^=",["^ ","^>","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/common.cljs","^?",109,"^@",7,"^A",109,"^B",16,"^C",["^D",["^E",["^D",[["~$&","~$args"]]]]],"^R","The function used by replumb for logging. It simply calls println for\n  now so you that client code can set *print-fn* to customize the\n  behavior, for example the following marks traces as DEBUG:\n\n  (set! *print-fn*\n    (fn [& args]\n      (.apply (.-debug js/console) js/console (into-array args))))","^1C",["^ ","^H",true,"^L",0,"^I",[["^D",["^1S"]]],"^C",["^D",[["~$&","^1S"]]],"^K",["^D",[null]]]],"^3","~$replumb.common/debug-prn","^H",true,"^>","resources/public/cards/js/replumb/common.cljs","^B",16,"^1C",["^ ","^H",true,"^L",0,"^I",[["^D",["^1S"]]],"^C",["^D",[["~$&","^1S"]]],"^K",["^D",[null]]],"^I",[["^D",["^1S"]]],"^J",null,"^K",["^D",[null]],"^@",1,"^?",109,"^A",109,"^L",0,"^M",true,"^C",["^D",[["~$&","^1S"]]],"^R","The function used by replumb for logging. It simply calls println for\n  now so you that client code can set *print-fn* to customize the\n  behavior, for example the following marks traces as DEBUG:\n\n  (set! *print-fn*\n    (fn [& args]\n      (.apply (.-debug js/console) js/console (into-array args))))"],"~$valid-eval-error?",["^ ","^<",null,"^=",["^ ","^>","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/common.cljs","^?",75,"^@",7,"^A",75,"^B",24,"^C",["^D",["^E",["^D",[["^F"]]]]],"^R","Is the string returned from an evaluation valid?"],"^3","~$replumb.common/valid-eval-error?","^H",false,"^>","resources/public/cards/js/replumb/common.cljs","^B",24,"^I",["^D",[["^F"]]],"^J",null,"^K",["^D",[null,null]],"^@",1,"^?",75,"^A",75,"^L",1,"^M",true,"^C",["^D",["^E",["^D",[["^F"]]]]],"^R","Is the string returned from an evaluation valid?"],"~$error-argument-must-be-symbol",["^ ","^<",null,"^=",["^ ","^>","/Users/yehonathan.sharvit/prj/klipse/resources/public/cards/js/replumb/common.cljs","^?",96,"^@",7,"^A",96,"^B",36,"^C",["^D",["^E",["^D",[["~$symbol","^1:"]]]]],"^R","Yields a \"Argument must a be a symbol\" error map. Receives the\n  symbol/fn name printed in the message and ex-info data."],"^3","~$replumb.common/error-argument-must-be-symbol","^H",false,"^>","resources/public/cards/js/replumb/common.cljs","^B",36,"^I",["^D",[["^1X","^1:"]]],"^J",null,"^K",["^D",[null,null]],"^@",1,"^?",96,"^A",96,"^L",2,"^M",true,"^C",["^D",["^E",["^D",[["^1X","^1:"]]]]],"^R","Yields a \"Argument must a be a symbol\" error map. Receives the\n  symbol/fn name printed in the message and ex-info data."]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^2",["^Y","~:warning","~:no-pr-str-on-value","^X"]],"~:order",["^Y","^X","^22","^21"]],"^R",null]